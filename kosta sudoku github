import numpy as np

# grid = [[5,3,0,0,7,0,0,0,0],
#         [6,0,0,1,9,5,0,0,0],
#         [0,9,8,0,0,0,0,6,0],
#         [8,0,0,0,6,0,0,0,3],
#         [4,0,0,8,0,3,0,0,1],
#         [7,0,0,0,2,0,0,0,6],
#         [0,6,0,0,0,0,2,8,0],
#         [0,0,0,0,1,9,0,0,5],
#         [0,0,0,0,0,0,0,0,0]]

grid = [[6,3,7,5,9,4,2,1,8],
        [1,9,5,2,8,3,7,6,4],
        [8,4,2,1,6,7,3,5,9],
        [3,2,4,9,1,6,5,8,7],
        [7,1,9,8,3,5,6,4,2],
        [5,6,8,7,4,2,1,9,3],
        [2,8,6,4,7,1,9,3,5],
        [4,7,3,6,5,9,8,2,1],
        [9,5,1,3,2,8,4,7,0]]

def possible(row, column, number):
    global grid
    #Is the number appearing in the given row?
    for i in range(0,9):
        if grid[row][i] == number:
            return False

    #Is the number appearing in the given column?
    for i in range(0,9):
        if grid[i][column] == number:
            return False
    
    #Is the number appearing in the given square?
    x0 = (column // 3) * 3
    y0 = (row // 3) * 3
    for i in range(0,3):
        for j in range(0,3):
            if grid[y0+i][x0+j] == number:
                return False
            
    def is_knights_move_away(r1, c1, r2, c2):
        return abs(r1 - r2) == 2 and abs(c1 - c2) == 1 or abs(r1 - r2) == 1 and abs(c1 - c2) == 2

    # Check knight's move away
    for i in range(9):
        for j in range(9):
            if grid[i][j] != 0 and is_knights_move_away(row, column, i, j) and grid[i][j] == number:
                return False


    return True

def solve():
    global grid
    for row in range(0,9):
        for column in range(0,9):
            if grid[row][column] == 0:
                for number in range(1,10):
                    if possible(row, column, number):
                        grid[row][column] = number
                        solve()
                        grid[row][column] = 0
                return
      
    print(np.matrix(grid))
    input('More possible solutions')

solve()
print("done")
print(grid)







    
            

